  return (
    <>
      <div id="model-wrapper">
        <div id="wave-model">
          <div id="cover-color">
            <h1>Details</h1>
            <div id="user-profile">
              <img
                src={posterIcon ? posterIcon : userIcon}
                alt="user"
                id="wave-user-icon"
              />
              <div id="creator-details">
                <p id="creator-name">{posterName}</p>
              </div>
              <svg
                xmlns="http://www.w3.org/2000/svg"
                width="23"
                height="25"
                viewBox="0 0 23 25"
                fill="none"
                onClick={() => setOpenModel(false)}
              >
                <ellipse
                  cx="11.4194"
                  cy="12.6786"
                  rx="10.7319"
                  ry="11.7643"
                  fill="#DECAA5"
                />
                <line
                  y1="-0.5"
                  x2="15.924"
                  y2="-0.5"
                  transform="matrix(0.673947 0.738779 -0.673947 0.738779 6.64966 7.44995)"
                  stroke="#B18D4B"
                />
                <line
                  y1="-0.5"
                  x2="15.924"
                  y2="-0.5"
                  transform="matrix(-0.673947 0.738779 0.673947 0.738779 17.3816 7.44995)"
                  stroke="#B18D4B"
                />
              </svg>
            </div>
          </div>
          <div id="wave-message-container">
            <div id="message">
              <h3>Message</h3>
              <p>{waveMessage}</p>
            </div>
            <span id="image-height-line"></span>
            <div id="image">
              <img src={waveImage ? waveImage : ""} alt="" />
            </div>
          </div>
          <div id="add-button-container">
            
            {!showInput && ( 
              <button
                id="add-comment"
                type="button"
                onClick={() => setShowInput(true)} 
              >
                Add Comments
              </button>
            )}
            {showInput && (
              <form id="comment-input" onSubmit={formik.handleSubmit}>
                <div id="input-box">
                  <input
                    type="text"
                    name="comment"
                    id="comment"
                    placeholder="Write something.."
                    value={formik.values.comment}
                    onChange={formik.handleChange}
                    onBlur={formik.handleBlur}
                  />
                  {formik.touched.comment && formik.errors.comment ? (
                    <div className="error" style={{marginTop:10}}>{formik.errors.comment}</div>
                  ) : null}
                </div>
                <button
                  type="button"
                  id="post-comment"
                  onClick={() => setShowInput(false)}
                >
                  Cancel
                </button>
                <button type="submit" id="post-comment">
                  {editCommentId ? "Update" : "Post"}{" "}
                </button>
              </form>
            )}
          </div>
          
          {comments.length > 0 ? (
  comments.map((item) => (
    <div key={item.id} id="comment-details">
      <p id="commenter-message">
        <b id="commenter-name">{item.commenterName} :</b> {item.comment}
      </p>
      {item.isSameUser && (
        <div id="button-container">
          <p
            id="edit-button"
            onClick={() => handleEditClick(item.id, item.comment)}
          >
            Edit&nbsp;|&nbsp;
          </p>
          <p
            id="delete-button"
            onClick={() => handleDeleteComment(item.id)}
          >
            Delete
          </p>
        </div>
      )}
    </div>
  ))
) : (
  <p style={{marginTop:55 , marginLeft:7}}>No comments yet.</p>
)}

        </div>
      </div>
    </>
  );

//////////////////////////////////////////////////////


#model-wrapper {
    position: fixed;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background-color: rgba(0, 0, 0, 0.41);
    z-index: 2;
}

#wave-model {
    max-height: 554px;
    position: fixed;
    border-radius: 10px;
    padding: 10px;
    background: #fff;
    box-shadow: 7px 6px 14px 0px rgba(0, 0, 0, 0.04);
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    overflow-y: scroll;
}

#cover-color {
    width: 100%;
    height: 134.636px;
    flex-shrink: 0;
    border-radius: 10px;
    background: #c5b084;
    box-shadow: 7px 6px 14px 0px rgba(0, 0, 0, 0.04);
    margin-top: -50px;
}

#cover-color h1 {
    color: rgba(184, 156, 103, 0.3);
    font-size: 80px;
    text-align: center;
}

#user-profile {
    display: flex;
    margin-left: 60px;
    transform: translateY(-120px);
}

#wave-user-icon {
    width: 133px;
    height: 133px;
    flex-shrink: 0;
    border-radius: 146.4px;
    border: 1px solid #fff;
}

#cover-color svg {
    margin-left: auto;
    margin-right: 10px;
    margin-top: -20px;
    display: flex;
    cursor: pointer;
}

#creator-details {
    height: fit-content;
    margin-left: 50px;
}

#creator-name {
    color: #fff;
    font-size: 20px;
    font-weight: 700;
    width: 298.109px;
    height: 35.293px;
    margin-bottom: 0px;
}

#creator-id {
    color: #fff;
    font-size: 16px;
    font-style: italic;
    margin-top: 0px;
    width: 298.109px;
    height: 28.757px;
}

#wave-message-container {
    display: flex;
    height: auto;
    background-color: white;
    padding: 10px;
    padding-top: 0px;
}

#message {
    background-color: white;
    height: auto;
    width: 50%;
}

#message h3 {
    margin-top: 50px;
    margin-left: 20px;
    color: #3c3d3e;
    font-size: 16px;
    font-weight: 500;
    line-height: 19px;
}

#message p {
    line-break: anywhere;
    margin-left: 40px;
    opacity: 0.8;
    color: #3c3d3e;
    font-size: 16px;
    width: 82%;
}

#image-height-line {
    background: rgba(77, 113, 127, 0.25);
    width: 2px;
    margin-right: 5px;
}

#image {
    width: 50%;
    background-color: white;
    padding: 10px;
    padding-left: 0px;
    display: flex;
    justify-content: center;
}

#image img {
    max-width: 100%;
    max-height: 225px;
}
 


#image {

    display: flex;
    justify-content: center;
    align-items: center;
    align-items: center;
}

#add-button-container {
    border-radius: 10px;
    height: 50px;
    margin-top: 2px;
    padding: 5px;
}

#add-comment {
    width: 190px;
    height: 50px;
    border-radius: 10px;
    background: #3e5677;
    color: #fff;
    text-align: center;
    font-size: 20px;
    border: none;
    margin-bottom: 10px;
}

#add-comment:hover{
    background-color:#0981f9;
}

#post-comment{
    width: 190px;
    height: 50px;
    border-radius: 10px;
    background: #3e5677;
    color: #fff;
    text-align: center;
    font-size: 20px;
    border: none;
    margin-bottom: 10px;
}
#post-comment:hover{
    background-color:#0981f9;
}
#comment-input {
    /* display: flex; */
    border-radius: 10px;
}

#input-box {
    /* width:100%; */
    width: 95%;
    padding-right: 32px;
}

#comment {
    height: 40px;
    border-radius: 10px;
    width: 100%;
    border: 1px solid grey;
    outline-style: none;
    font-size: 17px;
    padding-left: 15px;
    padding-right: 15px;
    margin-bottom: -5px;
}

#post-comment {
    height: 41px;
    font-size: 18px;
    margin-left: auto;
    padding: 1px;
    margin: 0px 5px;
    margin-top:20px;
}

#errors {
    color: rgb(253, 0, 0);
    font-size: 15px;
}

#comment-details {
    background-color: #ffffff;
    border-radius: 10px;
    /* box-shadow: 16px 16px 31px #cdcdcd, -16px -16px 31px #ffffff; */
    padding-left: 20px;
    padding-right: 20px;
    /* padding-bottom: 5px; */
    padding-top: 5px;
    margin-top: 50px;
    margin-bottom: -20px;
    display: flex;
    align-items: center;
}

#commenter-message {
    margin-top: 0px;
    margin-bottom: 15px;
    padding-bottom: 0px;
    line-height: auto;
    margin-right: 20px;
    opacity: 0.8;
    color: #3c3d3e;
    font-size: 16px;
}

#commenter-name {
    color: #3c3d3e;
    font-size: 16px;
    font-weight: 700;
}

#button-container {
    max-width: 140px;
    display: flex;
    margin-left: auto;
    margin-right: -10px;
    height: 40px;
    align-items: center;
}

#edit-button {
    width: auto;
    color: #3e5677;
    font-size: 16px;
    cursor: pointer;
}

#edit-button:hover{
    color:#0981f9;
}

#delete-button{
    width: auto;
    color: #3e5677;
    font-size: 16px;
    cursor: pointer;
}

#delete-button:hover{
    color:#0981f9;
}
